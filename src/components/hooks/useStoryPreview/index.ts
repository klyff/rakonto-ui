import { Resolutions, VideoDetails } from '../../../lib/types'

interface iUserStoryPreview {
  video?: VideoDetails
  defaultRes?: Resolutions
}

type PlaySource = {
  id: string
  bitrate?: number
  duration?: number
  format?: string
  height?: number
  src: string
  size?: number
  width?: number
  label: Resolutions
  selected: boolean
  type: 'video/mp4'
}

const sortByRes = (a: any, b: any) => {
  const aNumber = parseInt(a.replace('p', ''))
  const bNumber = parseInt(b.replace('p', ''))
  if (aNumber > bNumber) {
    return -1
  }
  if (bNumber > aNumber) {
    return 1
  }
  return 0
}

export const useStoryPreview = ({
  video,
  defaultRes
}: iUserStoryPreview): Partial<{ preview: string; autoGeneratedCover: string; sources: PlaySource[] }> => {
  if (!video) return {}
  const { thumbnails, alternatives, gifs } = video

  const getThumbnail = (index = 0): string => {
    const thumbnail = thumbnails[Object.keys(thumbnails).sort(sortByRes)[0] as Resolutions]
    if (!thumbnail?.length) return getThumbnail(index + 1)
    if (thumbnail[0].id) {
      return thumbnail[0].url
    }
    return getThumbnail(index + 1)
  }

  const getGif = (index = 0): string => {
    const gif = gifs[Object.keys(gifs).sort(sortByRes)[0] as Resolutions]
    if (!gif?.length) return getThumbnail(index + 1)
    if (gif[0].id) {
      return gif[0].url
    }
    return getGif(index + 1)
  }

  return {
    preview: Object.keys(gifs).length ? getGif() : undefined,
    autoGeneratedCover: Object.keys(thumbnails).length ? getThumbnail() : undefined
  }
}
